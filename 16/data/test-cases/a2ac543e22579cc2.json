{"uid":"a2ac543e22579cc2","name":"test_creating_delay_episode","fullName":"tests.test_creating_delay_episode#test_creating_delay_episode","historyId":"df3d929e7a986ded5f73b7eda0461b28","time":{"start":1691591582708,"stop":1691591610377,"duration":27669},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55a74201b783 <unknown>\n#1 0x55a741d47766 <unknown>\n#2 0x55a741d79f26 <unknown>\n#3 0x55a741da6d06 <unknown>\n#4 0x55a741da2e8d <unknown>\n#5 0x55a741da25f5 <unknown>\n#6 0x55a741d14da3 <unknown>\n#7 0x55a741fdce98 <unknown>\n#8 0x55a741fe0d67 <unknown>\n#9 0x55a741feb32c <unknown>\n#10 0x55a741fe1993 <unknown>\n#11 0x55a741fb0827 <unknown>\n#12 0x55a741d132d1 <unknown>\n#13 0x7f9001e12d90 <unknown>","statusTrace":"fn = <selene.core.wait.Command object at 0x7f73b7e53450>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:529: in raw_click\n    element.locate().click()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:189: in locate\n    return self._locator()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:1133: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73b7e35b10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x55a...\\\\n#11 0x55a741fb0827 \\\\u003Cunknown>\\\\n#12 0x55a741d132d1 \\\\u003Cunknown>\\\\n#13 0x7f9001e12d90 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55a74201b783 <unknown>\nE       #1 0x55a741d47766 <unknown>\nE       #2 0x55a741d79f26 <unknown>\nE       #3 0x55a741da6d06 <unknown>\nE       #4 0x55a741da2e8d <unknown>\nE       #5 0x55a741da25f5 <unknown>\nE       #6 0x55a741d14da3 <unknown>\nE       #7 0x55a741fdce98 <unknown>\nE       #8 0x55a741fe0d67 <unknown>\nE       #9 0x55a741feb32c <unknown>\nE       #10 0x55a741fe1993 <unknown>\nE       #11 0x55a741fb0827 <unknown>\nE       #12 0x55a741d132d1 <unknown>\nE       #13 0x7f9001e12d90 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <allure_commons._allure.fixture object at 0x7f73b7e51e50>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:61: in podcaster_cabinet\n    podcaster.author_settings()\npages/podcasters_page.py:168: in author_settings\n    browser.element('[data-spec=\"podcaster-author-tab-settings\"]').click()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:533: in click\n    self.wait.for_(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:141: in logic\n    raise self._hook_failure(failure)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1449: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1277: in <lambda>\n    ] = lambda config, path=None: fp.thread(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:83: in thread\n    return pipe(*functions)(arg)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1308: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73b7e35b10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x55a...\\\\n#11 0x55a741fb0827 \\\\u003Cunknown>\\\\n#12 0x55a741d132d1 \\\\u003Cunknown>\\\\n#13 0x7f9001e12d90 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55a74201b783 <unknown>\nE       #1 0x55a741d47766 <unknown>\nE       #2 0x55a741d79f26 <unknown>\nE       #3 0x55a741da6d06 <unknown>\nE       #4 0x55a741da2e8d <unknown>\nE       #5 0x55a741da25f5 <unknown>\nE       #6 0x55a741d14da3 <unknown>\nE       #7 0x55a741fdce98 <unknown>\nE       #8 0x55a741fe0d67 <unknown>\nE       #9 0x55a741feb32c <unknown>\nE       #10 0x55a741fe1993 <unknown>\nE       #11 0x55a741fb0827 <unknown>\nE       #12 0x55a741d132d1 <unknown>\nE       #13 0x7f9001e12d90 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"remote_browser","time":{"start":1691591544339,"stop":1691591546512,"duration":2173},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"authorization","time":{"start":1691591546513,"stop":1691591554748,"duration":8235},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"podcaster_cabinet","time":{"start":1691591554748,"stop":1691591555613,"duration":865},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"creating_author","time":{"start":1691591555613,"stop":1691591566650,"duration":11037},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"creating_podcast","time":{"start":1691591566651,"stop":1691591582707,"duration":16056},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55a74201b783 <unknown>\n#1 0x55a741d47766 <unknown>\n#2 0x55a741d79f26 <unknown>\n#3 0x55a741da6d06 <unknown>\n#4 0x55a741da2e8d <unknown>\n#5 0x55a741da25f5 <unknown>\n#6 0x55a741d14da3 <unknown>\n#7 0x55a741fdce98 <unknown>\n#8 0x55a741fe0d67 <unknown>\n#9 0x55a741feb32c <unknown>\n#10 0x55a741fe1993 <unknown>\n#11 0x55a741fb0827 <unknown>\n#12 0x55a741d132d1 <unknown>\n#13 0x7f9001e12d90 <unknown>","statusTrace":"fn = <selene.core.wait.Command object at 0x7f73b7e53450>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:529: in raw_click\n    element.locate().click()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:189: in locate\n    return self._locator()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:1133: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73b7e35b10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x55a...\\\\n#11 0x55a741fb0827 \\\\u003Cunknown>\\\\n#12 0x55a741d132d1 \\\\u003Cunknown>\\\\n#13 0x7f9001e12d90 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55a74201b783 <unknown>\nE       #1 0x55a741d47766 <unknown>\nE       #2 0x55a741d79f26 <unknown>\nE       #3 0x55a741da6d06 <unknown>\nE       #4 0x55a741da2e8d <unknown>\nE       #5 0x55a741da25f5 <unknown>\nE       #6 0x55a741d14da3 <unknown>\nE       #7 0x55a741fdce98 <unknown>\nE       #8 0x55a741fe0d67 <unknown>\nE       #9 0x55a741feb32c <unknown>\nE       #10 0x55a741fe1993 <unknown>\nE       #11 0x55a741fb0827 <unknown>\nE       #12 0x55a741d132d1 <unknown>\nE       #13 0x7f9001e12d90 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <allure_commons._allure.fixture object at 0x7f73b7e51e50>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:61: in podcaster_cabinet\n    podcaster.author_settings()\npages/podcasters_page.py:168: in author_settings\n    browser.element('[data-spec=\"podcaster-author-tab-settings\"]').click()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:533: in click\n    self.wait.for_(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py:141: in logic\n    raise self._hook_failure(failure)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1449: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1277: in <lambda>\n    ] = lambda config, path=None: fp.thread(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:83: in thread\n    return pipe(*functions)(arg)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:1308: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:802: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:836: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:847: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73b7e35b10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x55a...\\\\n#11 0x55a741fb0827 \\\\u003Cunknown>\\\\n#12 0x55a741d132d1 \\\\u003Cunknown>\\\\n#13 0x7f9001e12d90 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55a74201b783 <unknown>\nE       #1 0x55a741d47766 <unknown>\nE       #2 0x55a741d79f26 <unknown>\nE       #3 0x55a741da6d06 <unknown>\nE       #4 0x55a741da2e8d <unknown>\nE       #5 0x55a741da25f5 <unknown>\nE       #6 0x55a741d14da3 <unknown>\nE       #7 0x55a741fdce98 <unknown>\nE       #8 0x55a741fe0d67 <unknown>\nE       #9 0x55a741feb32c <unknown>\nE       #10 0x55a741fe1993 <unknown>\nE       #11 0x55a741fb0827 <unknown>\nE       #12 0x55a741d132d1 <unknown>\nE       #13 0x7f9001e12d90 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidSessionIdException","steps":[{"name":"Переход на страницу подкаста","time":{"start":1691591582709,"stop":1691591583239,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Нажатие кнопки \"Новый выпуск\"","time":{"start":1691591583239,"stop":1691591583656,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Загрузка файла","time":{"start":1691591583656,"stop":1691591585735,"duration":2079},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Заполнение поля \"Название эпизода\"","time":{"start":1691591585736,"stop":1691591586353,"duration":617},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Заполнение поля \"Описание\"","time":{"start":1691591586353,"stop":1691591588070,"duration":1717},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Переход в таб \"Настройки\"","time":{"start":1691591588070,"stop":1691591588464,"duration":394},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Заполнение поля \"Номер сезона\"","time":{"start":1691591588464,"stop":1691591588833,"duration":369},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Заполнение поля \"Номер эпизода\"","time":{"start":1691591588833,"stop":1691591589217,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Выбор типа выпуска","time":{"start":1691591589217,"stop":1691591596037,"duration":6820},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Содержание ненормативной лексики","time":{"start":1691591596037,"stop":1691591603339,"duration":7302},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Отложенная публикация","time":{"start":1691591603339,"stop":1691591609932,"duration":6593},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Публикация эпизода","time":{"start":1691591609932,"stop":1691591610376,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":12,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"podcaster_cabinet::0","time":{"start":1691591610378,"stop":1691591614629,"duration":4251},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55a74201b783 <unknown>\n#1 0x55a741d47766 <unknown>\n#2 0x55a741d79f26 <unknown>\n#3 0x55a741da6d06 <unknown>\n#4 0x55a741da2e8d <unknown>\n#5 0x55a741da25f5 <unknown>\n#6 0x55a741d14da3 <unknown>\n#7 0x55a741fdce98 <unknown>\n#8 0x55a741fe0d67 <unknown>\n#9 0x55a741feb32c <unknown>\n#10 0x55a741fe1993 <unknown>\n#11 0x55a741fb0827 <unknown>\n#12 0x55a741d132d1 <unknown>\n#13 0x7f9001e12d90 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/RedBasset/RedBasset/tests/conftest.py\", line 61, in podcaster_cabinet\n    podcaster.author_settings()\n  File \"/home/runner/work/RedBasset/RedBasset/pages/podcasters_page.py\", line 168, in author_settings\n    browser.element('[data-spec=\"podcaster-author-tab-settings\"]').click()\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py\", line 533, in click\n    self.wait.for_(\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                             ^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 1449, in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 1277, in <lambda>\n    ] = lambda config, path=None: fp.thread(\n                                  ^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py\", line 83, in thread\n    return pipe(*functions)(arg)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  [Previous line repeated 2 more times]\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 1308, in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 802, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 836, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 847, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},{"name":"remote_browser::0","time":{"start":1691591614630,"stop":1691591614788,"duration":158},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_creating_delay_episode"},{"name":"host","value":"fv-az244-671"},{"name":"thread","value":"2180-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_creating_delay_episode"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"ed7d55431a2520d5","reportUrl":"https://SerovVl.github.io/RedBasset/15//#testresult/ed7d55431a2520d5","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=4444): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f7c1d61bfd0>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1691591293462,"stop":1691591293462,"duration":0}},{"uid":"8b46d4663eeabbe5","reportUrl":"https://SerovVl.github.io/RedBasset/14//#testresult/8b46d4663eeabbe5","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55fb18e3e613 <unknown>\n#1 0x55fb18b6a537 <unknown>\n#2 0x55fb18b95588 <unknown>\n#3 0x55fb18b925d9 <unknown>\n#4 0x55fb18bd2643 <unknown>\n#5 0x55fb18bd1d8f <unknown>\n#6 0x55fb18bc9803 <unknown>\n#7 0x55fb18b9d68b <unknown>\n#8 0x55fb18b9e42e <unknown>\n#9 0x55fb18dffc28 <unknown>\n#10 0x55fb18e03af7 <unknown>\n#11 0x55fb18e0e01c <unknown>\n#12 0x55fb18e04723 <unknown>\n#13 0x55fb18dd3457 <unknown>\n#14 0x55fb18e28628 <unknown>\n#15 0x55fb18e287b7 <unknown>\n#16 0x55fb18e37483 <unknown>\n#17 0x7f6f238f5b43 <unknown>","time":{"start":1691590775079,"stop":1691590775079,"duration":0}}]},"tags":[]},"source":"a2ac543e22579cc2.json","parameterValues":[]}